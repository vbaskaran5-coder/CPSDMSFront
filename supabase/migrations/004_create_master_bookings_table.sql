-- Migration: Create master_bookings table
-- This table consolidates pre-booked jobs and same-day sales, aligning with the MasterBooking type.
-- It replaces the older 'jobs' and 'Master Bookings' table definitions.

-- Drop related tables if they exist from previous migrations
DROP TABLE IF EXISTS public.jobs;
DROP TABLE IF EXISTS "Master Bookings"; -- Use quotes if table name has spaces/caps
DROP TABLE IF EXISTS public.completed_jobs; -- Drop this as completion status is in master_bookings

-- Create the master_bookings table
CREATE TABLE public.master_bookings (
    -- Core Identifiers
    booking_id TEXT PRIMARY KEY, -- Using the app-generated Booking ID
    route_number TEXT,
    contractor_number TEXT, -- Worker ID (references workers table, consider FK later if needed)

    -- Customer Info
    first_name TEXT,
    last_name TEXT,
    full_address TEXT,
    home_phone TEXT,
    cell_phone TEXT,
    email_address TEXT,

    -- Job Details
    price TEXT, -- Store as TEXT as in TS type, but consider NUMERIC if calculations needed
    property_type TEXT, -- e.g., 'FP', 'FO', 'BO'
    log_sheet_notes TEXT, -- Notes for worker or JSON for contracts
    services JSONB DEFAULT '[]'::jsonb, -- Array of SoldService objects

    -- Status & Payment
    completed TEXT, -- e.g., 'x' or NULL/empty
    date_completed TIMESTAMPTZ, -- Timestamp when completed
    status TEXT, -- e.g., 'cancelled', 'next_time', 'pending', 'contract', 'redo', 'ref/dnb'
    prepaid TEXT, -- e.g., 'x' or NULL/empty
    payment_method TEXT, -- e.g., 'Cash', 'Cheque', 'Billed', 'Custom Split String'
    is_paid BOOLEAN DEFAULT false,

    -- Metadata
    is_prebooked BOOLEAN DEFAULT false, -- From master import?
    is_contract BOOLEAN DEFAULT false, -- Upsell/Contract?
    contract_title TEXT,
    upsell_menu_id TEXT, -- Reference to hardcoded upsell ID
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),

    -- Original Import Fields (Optional, TEXT to match potential import data)
    booked_by TEXT,
    date_time_booked TEXT, -- Consider TIMESTAMPTZ if format is consistent
    master_map TEXT,
    "group" TEXT, -- Use quotes for reserved keyword 'group'
    sprinkler TEXT,
    gate TEXT,
    must_be_home TEXT,
    call_first TEXT,
    second_run TEXT,
    city TEXT, -- Added city
    phone_type TEXT -- Added phone_type
);

-- Enable Row Level Security (RLS)
ALTER TABLE public.master_bookings ENABLE ROW LEVEL SECURITY;

-- Policies:
-- Allow authenticated users (Console, RM, Workers) to read bookings.
-- **Crucially, reads might need to be restricted based on territory/assignment later.**
CREATE POLICY "Allow authenticated read access"
ON public.master_bookings
FOR SELECT
TO authenticated
USING (true); -- START BROAD, RESTRICT LATER if needed based on roles

-- Allow authenticated users (Console, RM, Workers) to insert bookings (e.g., new sales).
CREATE POLICY "Allow authenticated insert access"
ON public.master_bookings
FOR INSERT
TO authenticated
WITH CHECK (true);

-- Allow authenticated users (Console, RM, Workers) to update bookings.
-- **Updates might need restrictions later (e.g., worker can only update *their* jobs).**
CREATE POLICY "Allow authenticated update access"
ON public.master_bookings
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true); -- START BROAD, RESTRICT LATER


-- Add indexes for commonly queried columns
CREATE INDEX IF NOT EXISTS master_bookings_route_number_idx ON public.master_bookings (route_number);
CREATE INDEX IF NOT EXISTS master_bookings_contractor_number_idx ON public.master_bookings (contractor_number);
CREATE INDEX IF NOT EXISTS master_bookings_full_address_idx ON public.master_bookings (full_address);
CREATE INDEX IF NOT EXISTS master_bookings_completed_idx ON public.master_bookings (completed);
CREATE INDEX IF NOT EXISTS master_bookings_status_idx ON public.master_bookings (status);
CREATE INDEX IF NOT EXISTS master_bookings_master_map_idx ON public.master_bookings (master_map);
CREATE INDEX IF NOT EXISTS master_bookings_group_idx ON public.master_bookings ("group"); -- Use quotes

-- Use the existing trigger function for updated_at timestamp
CREATE TRIGGER set_master_bookings_timestamp
BEFORE UPDATE ON public.master_bookings
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Add comments for clarity
COMMENT ON TABLE public.master_bookings IS 'Stores all job bookings, both pre-booked and same-day sales, replacing older jobs/Master Bookings tables.';
COMMENT ON COLUMN public.master_bookings.booking_id IS 'Unique identifier for the booking (primary key), typically generated by the application.';
COMMENT ON COLUMN public.master_bookings.services IS 'JSONB array storing SoldService objects detailing services sold for this booking.';
COMMENT ON COLUMN public.master_bookings.price IS 'Total price charged for the booking (stored as text).';
COMMENT ON COLUMN public.master_bookings.log_sheet_notes IS 'Text notes for the worker, or stringified JSON for contract answers.';
COMMENT ON COLUMN public.master_bookings.status IS 'Current status: pending, cancelled, next_time, contract, redo, ref/dnb, etc.';
COMMENT ON COLUMN public.master_bookings."group" IS 'Territory group the booking belongs to.';